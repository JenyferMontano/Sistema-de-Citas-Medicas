/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package com.una.proyectoprogramadoiiv2.view.appointment;

import com.una.proyectoprogramadoiiv2.controller.appointment.*;
import com.una.proyectoprogramadoiiv2.controller.doctor.*;
import com.una.proyectoprogramadoiiv2.controller.patient.*;
import com.una.proyectoprogramadoiiv2.view.FrmMain;
import com.una.proyectoprogramadoiiv2.view.patient.FrmAddPA;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author brimo
 */
public class FrmNewAppointment extends javax.swing.JInternalFrame {

    private PatientInterface patientService;
    private DoctorInterface doctorService;
    private AppointmentInterface appointmentService;
    ArrayList<String> listDoctors = new ArrayList<>();
    private String[][] allAppointments;
    
    /**
     * Creates new form FrmNewAppointment
     */
    public FrmNewAppointment() {
        initComponents();
        try{
        patientService = new PatientController();
        appointmentService = new AppointmentController();
        doctorService = new DoctorController();
        txtPatient.setEditable(false);
        dcDate.setMinSelectableDate(new Date());
        }catch(Exception e){
            e.getMessage();
        }
    }
    //allAppointments = appointmentService.getAll();

    private void fillCombo(){  
        if(!listDoctors.isEmpty()){
            for(int i=0;i<listDoctors.size();i++){
                this.cmbDoctors.addItem(listDoctors.get(i));
            }
        }else {
          JOptionPane.showMessageDialog(this,"No hay doctores disponibles en la fecha y hora deseada","Error",2);  
        }

}
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtIDPatient = new javax.swing.JTextField();
        btnFind = new javax.swing.JButton();
        txtPatient = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        dcDate = new com.toedter.calendar.JDateChooser();
        jLabel11 = new javax.swing.JLabel();
        cmbTime = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        cmbDoctors = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        txtApCode = new javax.swing.JTextField();
        btnClean = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        btnCmbFill = new javax.swing.JButton();
        txtFecha = new javax.swing.JTextField();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(null);

        jLabel7.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 18)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel7.setText("Agendar cita");

        jLabel9.setText("ID del Paciente:");

        txtIDPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIDPatientActionPerformed(evt);
            }
        });

        btnFind.setBackground(new java.awt.Color(205, 23, 25));
        btnFind.setForeground(new java.awt.Color(255, 255, 255));
        btnFind.setText("✓");
        btnFind.setToolTipText("Buscar");
        btnFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindActionPerformed(evt);
            }
        });

        txtPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPatientActionPerformed(evt);
            }
        });

        jLabel10.setText("Fecha:");

        dcDate.setBackground(new java.awt.Color(255, 255, 255));
        dcDate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dcDatePropertyChange(evt);
            }
        });

        jLabel11.setText("Hora:");

        cmbTime.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "08:00", "08:30", "09:00", "09:30", "10:00", "10:30", "11:00", "11:30", "13:00", "13:30", "14:00", "14:30", "15:00", "15:30", "16:00", "16:30" }));
        cmbTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbTimeActionPerformed(evt);
            }
        });

        jLabel8.setText("Medico:");

        cmbDoctors.setToolTipText("Primero consulte médico");

        jLabel12.setText("Codigo de cita:");

        txtApCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtApCodeActionPerformed(evt);
            }
        });

        btnClean.setBackground(new java.awt.Color(205, 23, 25));
        btnClean.setForeground(new java.awt.Color(255, 255, 255));
        btnClean.setText("Limpiar");
        btnClean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCleanActionPerformed(evt);
            }
        });

        btnSave.setBackground(new java.awt.Color(205, 23, 25));
        btnSave.setForeground(new java.awt.Color(255, 255, 255));
        btnSave.setText("Guardar");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnClose.setBackground(new java.awt.Color(205, 23, 25));
        btnClose.setForeground(new java.awt.Color(255, 255, 255));
        btnClose.setText("X");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        btnCmbFill.setBackground(new java.awt.Color(205, 23, 25));
        btnCmbFill.setForeground(new java.awt.Color(255, 255, 255));
        btnCmbFill.setText("Consultar médico");
        btnCmbFill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCmbFillActionPerformed(evt);
            }
        });

        txtFecha.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(190, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addGap(131, 131, 131)
                .addComponent(btnClose)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel12)
                        .addComponent(jLabel11)
                        .addComponent(jLabel10)
                        .addComponent(jLabel9))
                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnClean)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSave))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cmbDoctors, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(txtIDPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnFind, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(txtPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(22, 22, 22)
                                    .addComponent(btnCmbFill, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(txtApCode, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addComponent(cmbTime, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dcDate, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClose))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtIDPatient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFind))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPatient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel10)
                        .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(dcDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(cmbTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnCmbFill)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(cmbDoctors, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(txtApCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClean)
                    .addComponent(btnSave))
                .addGap(31, 31, 31))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtIDPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIDPatientActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_txtIDPatientActionPerformed

    private void cmbTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbTimeActionPerformed

    private void txtApCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtApCodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtApCodeActionPerformed

    private void btnCleanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCleanActionPerformed
        // TODO add your handling code here:
        clean();
    }//GEN-LAST:event_btnCleanActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        if(verifyAll()){
            if(qApo()){
            //String time = (String)cmbTime.getSelectedItem();
            String data[]=new String[5];
            data[0] = txtIDPatient.getText();
            data[1] = (String) cmbDoctors.getSelectedItem();
            data[2] = txtFecha.getText();
            data[3] = (String)cmbTime.getSelectedItem();
            data[4] = txtApCode.getText();
            String msj = appointmentService.add(data);
           JOptionPane.showMessageDialog(this, msj);
           clean();
            }else{
              JOptionPane.showMessageDialog(this,"Limite de citas alcanzado","Error",JOptionPane.ERROR_MESSAGE);    
            }
        }
        else{
         JOptionPane.showMessageDialog(this,"Debe completar todos los campos","Error",2);  
       }

    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        clean();
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindActionPerformed
        // TODO add your handling code here:
        if(!txtIDPatient.getText().equals("")){
        String[] data = patientService.find(txtIDPatient.getText());
        if(data!=null){
            txtPatient.setText(data[1]+" "+data[2]);   
        }else{
            //JOptionPane.showMessageDialog(this,data, "ERROR", 2);
            String[] response = {"SI","NO"};
            int opc = JOptionPane.showOptionDialog(this,"El paciente no se encuentra registrado. ¿Desea agregarlo?","ERROR", JOptionPane.DEFAULT_OPTION,2,null,response,response[0]);
            if(opc==0){
             newPatient();
        }
        }
        }else{
          JOptionPane.showMessageDialog(this,"Debe ingresar un ID", "ERROR", 2);  
        }
    }//GEN-LAST:event_btnFindActionPerformed

    private void txtPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPatientActionPerformed
        // TODO add your handling code here:  
    }//GEN-LAST:event_txtPatientActionPerformed

    private void btnCmbFillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCmbFillActionPerformed
        // TODO add your handling code here:
        cmbDoctors.removeAllItems();
        listDoctors.removeAll(listDoctors);
        allAppointments = new String [0][0];
        
        if(verify()){  
        avDoctors();
        fillCombo();
        }else {
            JOptionPane.showMessageDialog(this, "Debe ingresar una fecha y hora para consultar un medico disponible","ERROR",2);
        }
    }//GEN-LAST:event_btnCmbFillActionPerformed

    private void dcDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dcDatePropertyChange
        // TODO add your handling code here:
        if(evt.getOldValue()!=null){
            SimpleDateFormat ff = new SimpleDateFormat("yyyy-MM-dd");
            txtFecha.setText(ff.format(dcDate.getCalendar().getTime()));
        }
        
    }//GEN-LAST:event_dcDatePropertyChange


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClean;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnCmbFill;
    private javax.swing.JButton btnFind;
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox<String> cmbDoctors;
    private javax.swing.JComboBox<String> cmbTime;
    private com.toedter.calendar.JDateChooser dcDate;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField txtApCode;
    private javax.swing.JTextField txtFecha;
    private javax.swing.JTextField txtIDPatient;
    private javax.swing.JTextField txtPatient;
    // End of variables declaration//GEN-END:variables

    private void avDoctors(){
     
    String[][] allDoctors = doctorService.getAll();
            
            for (String[] allDoctor : allDoctors) {
                listDoctors.add(allDoctor[1]);
            }
        //=new String[allDoctors.length];//=new String[allAppointments.length];
        
     allAppointments = appointmentService.getAll();
     //String[] noDoctors;
     List<String> noDoctors = new ArrayList<>();
     if(allAppointments.length!=0){
        
        for(int i=0;i<allAppointments.length;i++){
            if((txtFecha.getText().equals(allAppointments[i][2]))&&(cmbTime.getSelectedItem().equals(allAppointments[i][3]))){
                noDoctors.add(allAppointments[i][1]);
            }
        } 

          Iterator<String> iterator = listDoctors.iterator();
        while (iterator.hasNext()) {
            String doctor = iterator.next();
            for (String noDoctor : noDoctors) {
                if (doctor.equals(noDoctor)) {
                    iterator.remove();
                }
            }
        }
    }
}

    private boolean qApo(){
        int cont=0;
      for(int i=0;i<allAppointments.length;i++){
          if(txtIDPatient.getText().equals(allAppointments[i][0])){
           cont++;   
          } 
      }  
      if(cont<5){
          return true;
      }
      return false;
    }
    
    private boolean verify(){
        if(!txtFecha.getText().equals("")){
            return true;
        }
        return false;
    }
    
    private boolean verifyAll(){
        if(!txtIDPatient.getText().equals("")&&(!txtFecha.getText().equals("")&&(!cmbTime.getSelectedItem().equals("")&&(!cmbDoctors.getSelectedItem().equals(""))
                &&(!txtApCode.getText().equals(""))))){
        return true;
    }
        return false;
    }
    
    private void clean(){
        txtIDPatient.setText("");
        txtPatient.setText("");
        txtFecha.setText("");
        txtApCode.setText("");
        cmbDoctors.removeAllItems();
        listDoctors.removeAll(listDoctors);
       
    }
    
    private void newPatient(){
        FrmAddPA nPat = new FrmAddPA();
        FrmMain.desktopPane.add(nPat);
        nPat.toFront();
        nPat.setVisible(true);      
    }
    
}
